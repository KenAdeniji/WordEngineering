<table border="1">
	<caption>
		<a href="http://tcpipguide.com/free/t_ICMPVersion6ICMPv6ErrorMessageTypesandFormats.htm">ICMP Version 6 (ICMPv6) Error Message Types and Formats</a>
	</caption>
	<thead>
		<tr>
			<th>Message Type and Format</th>
			<th>Commentary</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>	
				<a href="http://tcpipguide.com/free/t_ICMPv6DestinationUnreachableMessages.htm">
					ICMPv6 Destination Unreachable Messages
				</a>
			</td>
			<td>
When a datagram cannot be delivered, recovery from this condition normally falls to higher-layer protocols like TCP, which will detect the miscommunication and re-send the lost datagrams. In some situations, such as a datagram dropped due to congestion of a router, this is sufficient, but in other cases a datagram may not be delivered due to an inherent problem with how it is being sent. For example, the source may have specified an invalid destination address, which means even if resent many times, the datagram will never get to its intended recipient.

In general, having the source just re-send undelivered datagrams while having no idea why they were lost is inefficient. It is better to have a feedback mechanism that can tell a source device about undeliverable datagrams and provide some information about why the datagram delivery failed. As in ICMPv4, in ICMPv6 this is done with Destination Unreachable messages. Each message includes a code that indicates the basic nature of the problem that caused the datagram not to be delivered, and includes all or part of the datagram that was undelivered, to help the source device diagnose the problem.
			</td>
		</tr>
		<tr>
			<td>	
				<a href="http://tcpipguide.com/free/t_ICMPv6PacketTooBigMessages.htm">
					ICMPv6 Packet Too Big Messages
				</a>
			</td>
			<td>
One of the most interesting changes made to the operation of the Internet Protocol in version 6 is related to the process of datagram fragmentation and reassembly. In IPv4, a host can send a datagram of any size allowed by the IP specification out onto the internetwork. If a router needs to send the datagram over a physical link that has a maximum transmission unit (MTU) size that is too small for the size of the datagram, it will automatically fragment the datagram and send the fragments individually so they will fit. The destination device will receive the fragments and reassemble them.

Even though it is convenient for hosts to be able to rely on routers to automatically fragment messages as needed, it is inefficient for routers to spend time doing this. For this reason, in IPv6 the decision was made to not allow routers to fragment datagrams. This puts the responsibility on each host to ensure that datagrams they send out are small enough to fit over every physical network between itself and any destination. This is done either by using the IPv6 default minimum MTU of 1280, which every physical link must support, or a special Path MTU Discovery process for determining the minimum MTU between a pair of devices. Again, the full details are in the discussion of IPv6 datagram size, MTU, fragmentation and reassembly.

If an IPv6 router is not allowed to fragment an IPv6 datagram that is too large to fit on the next physical link over which it must be forwarded, what should the router do with it? The datagram can't be forwarded, so the router has no choice but to discard it. When this happens, the router is required to report this occurrence back to the device that initially sent the datagram, using an ICMPv6 Packet Too Big message. The source device will know that it needs to fragment the datagram in order to have it successfully reach its destination.
			</td>
		</tr>
		<tr>
			<td>	
				<a href="http://tcpipguide.com/free/t_ICMPv6TimeExceededMessages.htm">
					ICMPv6 Time Exceeded Messages
				</a>
			</td>
			<td>
Each time a router passes an IPv6 datagram, it decreases the Hop Limit field. If the value ever reaches zero, the datagram expires and is discarded. When this happens, the router that dropped the datagram sends an ICMPv6 Time Exceeded message back to the datagram's originator to inform it that the datagram was dropped. This is basically the same as the ICMPv4 Time Exceeded message. As in the ICMPv4 case, the device receiving the message must decide whether and how to respond to receipt of the message. For example, since the error can be caused by a device using a Hop Limit that was too low, the device may try to re-send the datagram with a higher value before concluding that there is a routing problem and giving up. (See the topic covering the ICMPv4 Time Exceeded message for an illustration of how TTL expiration works.)

Just as with the ICMPv4 equivalent, there is also another “time expiration” situation that ICMPv6 Time Exceeded messages are used for. When an IP message is broken into fragments that are sent independently, the destination device is charged with reassembling the fragments into the original message. One or more fragments may not make it to the destination, however. To prevent the device from waiting forever, it sets a timer when the first fragment arrives. If this timer expires before all of the other fragments are also received, the device gives up on this message. The fragments are tossed out, and a Time Exceeded message is also generated.
			</td>
		</tr>
	<tbody>	
</table>
