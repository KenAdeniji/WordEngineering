using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

using System.Text;
using System.ComponentModel;

/*
	2018-08-16	https://goalkicker.com/CSharpBook/CSharpNotesForProfessionals.pdf
*/
namespace InformationInTransit.GoalKicker
{
	public static partial class EnumGoalKicker
	{
		public enum Day : byte
		{    Monday,    Tuesday,    Wednesday,    Thursday,    Friday,    Saturday,    Sunday }
	   
		[Flags] enum MyEnum : UInt64
		{
			//None = 0, can be used but not combined in bitwise operations    
			FlagA = 1,
			FlagB = 2, 
			FlagC = 4,
			FlagD = 8      //you must use powers of two or combinations of powers of two    
			//for bitwise operations to work 
		}

		public enum PossibleResults 
		{
			[Description("Success")]    OK = 1,
			[Description("File not found")]    FileNotFound = 2, 
			[Description("Access denied")]    AccessDenied = 3 
		}
		
		public static void Main(String[] argv)
		{
			// Define variables with values corresponding to specific days 
			Day myFavoriteDay = Day.Friday;
			Day myLeastFavoriteDay = Day.Monday;
			// Get the int that corresponds to myFavoriteDay // Friday is number 4 
			int myFavoriteDayIndex = (int)myFavoriteDay;
			// Get the day that represents number 5 
			Day dayFive = (Day)5;
			var typeOfDays = Enum.GetUnderlyingType(typeof(Day));

			var twoFlags = MyEnum.FlagA | MyEnum.FlagB;
			// This will enumerate all the flags in the variable: "FlagA, FlagB". 
			Console.WriteLine(twoFlags);
			
			var value = MyEnum.FlagA | MyEnum.FlagB;
			
			if(value.HasFlag(MyEnum.FlagA))    Console.WriteLine("Enum has FlagA");
			if(value.HasFlag(MyEnum.FlagB))    Console.WriteLine("Enum has FlagB");
			if(value.HasFlag(MyEnum.FlagC))    Console.WriteLine("Enum has FlagC");
			
			var type = typeof(MyEnum); var names = Enum.GetNames(type);
			foreach (var name in names) {    var item = (MyEnum)Enum.Parse(type, name);
				if (value.HasFlag(item)) Console.WriteLine("Enum has " + name);
			}			

			foreach(MyEnum flagToCheck in Enum.GetValues(typeof(MyEnum))) 
			{  
				if(value.HasFlag(flagToCheck))   
				{ 
					Console.WriteLine("Enum has " + flagToCheck);
				}
			}	

			value = MyEnum.FlagA;
			// set additional value 
			value |= MyEnum.FlagB;  //value is now FlagA, FlagB 
			value |= MyEnum.FlagC;  //value is now FlagA, FlagB, FlagC
			// remove flag 
			value &= ~MyEnum.FlagB; //value is now Flag1, Flag3 

			// Enum to string string thursday = DayOfWeek.Thursday.ToString(); // "Thursday"
			string seventhDay = Enum.GetName(typeof(DayOfWeek), 6); // "Saturday"
			string monday = Enum.GetName(typeof(DayOfWeek), DayOfWeek.Monday); // "Monday"
			// String to enum (.NET 4.0+ only - see below for alternative syntax for earlier .NET versions) DayOfWeek tuesday; Enum.TryParse("Tuesday", out tuesday); // DayOfWeek.Tuesday
			DayOfWeek sunday; bool matchFound1 = Enum.TryParse("SUNDAY", out sunday); // Returns false (case-sensitive match)
			DayOfWeek wednesday; bool matchFound2 = Enum.TryParse("WEDNESDAY", true, out wednesday); // Returns true; DayOfWeek.Wednesday (case-insensitive match)
			
			string[] weekdays = Enum.GetNames(typeof(DayOfWeek));

			PossibleResults result = PossibleResults.FileNotFound;
			Console.WriteLine(result);	// Prints "FileNotFound"    
			Console.WriteLine(GetDescriptionAttribute(result)); // Prints "File not found" 			
		}	
		
		public static string GetDescriptionAttribute(PossibleResults result) 
		{
			return 
			(
				(DescriptionAttribute)Attribute.GetCustomAttribute((result.GetType().GetField(result.ToString())), typeof(DescriptionAttribute))
			).Description; 
		}
		
		public static string GetDescription(this Enum enumValue) 
		{    
			return 
			(
				(DescriptionAttribute)Attribute.GetCustomAttribute((enumValue.GetType().GetField(enumValue.ToString())),
				typeof(DescriptionAttribute))
			).Description;    
		} 		
	}
}
