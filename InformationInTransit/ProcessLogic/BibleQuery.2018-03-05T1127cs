using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;

using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;
using System.Text.RegularExpressions;

using InformationInTransit.DataAccess;
using InformationInTransit.ProcessLogic;

namespace InformationInTransit.ProcessLogic
{
	/*
		2018-03-05	Created.
	*/
	public static partial class BibleQuery
	{
		public static void Main(string[] argv)
		{
			DataSet 		resultSet = null;
			String[] 		scriptureReferenceSubset = null;
			StringBuilder	sql = null;
			
			Query
			(
				BibleVersionDefault,
				ScriptureReferenceHelper.BibleQueryFormat,
				argv[0],
				"all",
				"phrase",
				ref resultSet,
				argv[1],
				ref scriptureReferenceSubset,
				ref sql,
				true
			);

			System.Console.WriteLine(sql);
		}

		public static void Query
		(
			String					bibleVersion,
			String					queryFormat,
			String					bibleWord,
			String					limit,
			String					logic,
			ref		DataSet			resultSet,
			String					scriptureReference,
			ref		String[]		scriptureReferenceSubset,
			ref		StringBuilder	sql,
			bool					wholeWords
		)
		{
			StringBuilder sqlWhereClause = new StringBuilder();
			String[] keywords = null;
			sql = new StringBuilder();

			Process
			(
					bibleVersion,
					bibleWord,
					queryFormat,				
				ref resultSet,
					scriptureReference,
				ref scriptureReferenceSubset,				
				ref sql
			);
			
            StringBuilder sqlLimit = BibleWordHelper.ParseLimit(limit);		
			StringBuilder sqlWord = BibleWordHelper.PrepareSqlStatement
            (
				logic,
				bibleWord,
				wholeWords,
				out keywords
            );

			sqlWhereClause.AppendFormat
			(
				WhereQueryFormat,
				sqlLimit,
				sqlLimit.Length == 0 ? "" : " AND ",
				"(" + sqlWord + ")"
			);
			
			sql.Replace
			(
				OrderByClause,
				OrderByClause + sqlWhereClause.ToString()
			);	
			
            resultSet = BibleWordHelper.ProcessSqlStatement(sql, bibleVersion);
		}

		public static void Process
		(
				string 			bibleVersion,
				string 			bibleWord,
				string			queryFormat,				
			ref DataSet 		result,
				String			scriptureReference,
			ref String[] 		scriptureReferenceSubset,				
			ref StringBuilder 	sql
		)
		{
			if (String.Compare(bibleVersion, BibleVersionDefault, true) != 0)
			{
				queryFormat = Regex.Replace
				(
					queryFormat,
					"verseText",
					bibleVersion + " AS verseText ",
					RegexOptions.IgnoreCase
				);
			}	
			scriptureReferenceSubset = scriptureReference.Split(ScriptureReferenceHelper.SubsetSeparator);
			List<ScriptureReferenceHelper.ScriptureReferenceSubset> scriptureReferenceSubsets = ScriptureReferenceHelper.Parse(scriptureReferenceSubset);
			sql = new StringBuilder();
			bibleWord = bibleWord.ToLower();
			if (scriptureReference == "")
			{
				sql.AppendFormat(queryFormat, "1 = 1");
			}
			else if (scriptureReference == ScriptureReferenceHelper.QuoteOfTheDayQuestion)
			{
				DateTime dateTimeNow = DateTime.Now;
				if (dateTimeNow.Date > ScriptureReferenceHelper.QuoteOfTheDayQuestionDateTime.Date)
				{	
					ScriptureReferenceHelper.QuoteOfTheDayVerseIDSequence = ScriptureReferenceHelper.GetRandomNumber(1, ScriptureReferenceHelper.VerseCount + 1);
					ScriptureReferenceHelper.QuoteOfTheDayQuestionDateTime = dateTimeNow;
				}	
				sql.AppendFormat(queryFormat, "verseIDSequence = " + ScriptureReferenceHelper.QuoteOfTheDayVerseIDSequence.ToString());
			}
			else if (scriptureReference == ScriptureReferenceHelper.RandomQuestion)
			{
				int randomNumber = ScriptureReferenceHelper.GetRandomNumber(1, ScriptureReferenceHelper.VerseCount + 1);
				sql.AppendFormat(queryFormat, "verseIDSequence = " + randomNumber.ToString());
			}
			else
			{		
				sql = ScriptureReferenceHelper.BuildSql(scriptureReferenceSubsets, queryFormat);
			}	
		}
		
		public static readonly char[] SplitSeparator = new Char [] {' ', ',', '.', ':', ';', '(', ')', '?', '!'};
		
		public const string BibleQueryFormat = "SELECT bookId, chapterId, verseId, verseText, verseIdSequence FROM Bible..KJV {0} ORDER BY BookID, ChapterID, VerseID";
		public const string BibleVersionDefault = "KJV";
		public const string	BibleWordFindFormat = "SELECT TOP 1 verseIdSequence FROM Bible..KJV {0}";
		public const string	OrderByClause = "ORDER BY BookID, ChapterID, VerseID";
		public const string PartialWordsQueryFormat = "   ( verseText LIKE '%{0}%' ) ";
		public const string WhereQueryFormat = " AND {0} {1} {2} ";
		public const string WholeWordsWildCardSearchQueryFormat = "  ( verseText  LIKE  '%[^a-z]{0}[^a-z]%' ) ";
	}
}
