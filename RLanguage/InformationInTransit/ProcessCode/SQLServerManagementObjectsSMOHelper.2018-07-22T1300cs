using Microsoft.SqlServer.Server;
using Microsoft.SqlServer.Management.Sdk.Sfc;
using Microsoft.SqlServer.Management.Smo;
using Microsoft.SqlServer.Management.Common;

using System;
using System.Collections.Specialized;
using System.Data.Sql;
using System.Data.SqlClient;
using System.Text;


namespace InformationInTransit.ProcessCode
{
	public static partial class SQLServerManagementObjectsSMOHelper
	{
		public static void Main(string[] argv)
		{
			DataDefinitionLanguageDDL(argv[0], argv[1]);
		}	
	
		public static String DataDefinitionLanguageDDL
		(
			String serverName,
			String databaseName
		)
		{
			StringBuilder sb = new StringBuilder();
			Server myServer = new Server(serverName);
			
			Scripter scripter = new Scripter(myServer);
			Database database = myServer.Databases[databaseName];
			/* With ScriptingOptions you can specify different scripting  
			* options, for example to include IF NOT EXISTS, DROP  
			* statements, output location etc*/
			var scriptOptions = new ScriptingOptions();
			scriptOptions.ScriptDrops = true;
			scriptOptions.IncludeIfNotExists = true; 
			scriptOptions.Indexes = true;
			if (database == null || database.Tables == null)
			{
				return "if (database == null || database.Tables == null)";
			}	
			foreach (Table myTable in database.Tables)
			{
				/* Generating IF EXISTS and DROP command for tables */
				StringCollection tableScripts = myTable.Script(scriptOptions);
				if (tableScripts == null)
				{
					continue;
				}
				foreach (string script in tableScripts)
				{
					if (String.IsNullOrEmpty(script) == false)
					{	
						Console.WriteLine(script);
						sb.Append(script);
					}					
				}
				/* Generating CREATE TABLE command */
				tableScripts = myTable.Script();
				foreach (string script in tableScripts)
				{
					Console.WriteLine(script);
					sb.Append(script);
				}
				foreach (ForeignKey key in myTable.ForeignKeys) 
                {
					tableScripts = key.Script(scriptOptions);
					foreach (string script in tableScripts)
					{
						Console.WriteLine(script);
						sb.Append(script);
					}
                }

			}
			return sb.ToString();	
		}
	}	
}
	