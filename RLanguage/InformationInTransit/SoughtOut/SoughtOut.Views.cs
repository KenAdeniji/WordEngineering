//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets24B032DA3307A9C75A9B5A0C54F5C7B5AA3BD93D3A751281286B47F9CBC93C76))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets24B032DA3307A9C75A9B5A0C54F5C7B5AA3BD93D3A751281286B47F9CBC93C76 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets24B032DA3307A9C75A9B5A0C54F5C7B5AA3BD93D3A751281286B47F9CBC93C76()
        {
            this.EdmEntityContainerName = "SoughtOutEntities";
            this.StoreEntityContainerName = "SoughtOutModelStoreContainer";
            this.HashOverMappingClosure = "889acfcb0f0a5cdf0497b275e2ad6592b2d6fd843eead926812363a44d10b730";
            this.HashOverAllExtentViews = "91fcd5c67596c3d4a248ad901bc2b4bec4e37d140217b961d8205e98b65c5bb6";
            this.ViewCount = 4;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for SoughtOutModelStoreContainer.Actors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SoughtOutModelStoreContainer.Actors", @"
    SELECT VALUE -- Constructing Actors
        [SoughtOutModel.Store.Actors](T1.Actors_ActorID, T1.Actors_Dated, T1.Actors_ScriptureReference, T1.Actors_Name, T1.Actors_Commentary, T1.Actors_Uri)
    FROM (
        SELECT 
            T.ActorID AS Actors_ActorID, 
            T.Dated AS Actors_Dated, 
            T.ScriptureReference AS Actors_ScriptureReference, 
            T.Name AS Actors_Name, 
            T.Commentary AS Actors_Commentary, 
            T.Uri AS Actors_Uri, 
            True AS _from0
        FROM SoughtOutEntities.Actors AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SoughtOutModelStoreContainer.Days
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SoughtOutModelStoreContainer.Days", @"
    SELECT VALUE -- Constructing Days
        [SoughtOutModel.Store.Days](T1.Days_DayID, T1.Days_Dated, T1.Days_ActorID, T1.Days_ScriptureReference, T1.Days_Title, T1.Days_Commentary, T1.Days_Uri)
    FROM (
        SELECT 
            T.DayID AS Days_DayID, 
            T.Dated AS Days_Dated, 
            T.ActorID AS Days_ActorID, 
            T.ScriptureReference AS Days_ScriptureReference, 
            T.Title AS Days_Title, 
            T.Commentary AS Days_Commentary, 
            T.Uri AS Days_Uri, 
            True AS _from0
        FROM SoughtOutEntities.Days AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SoughtOutEntities.Actors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SoughtOutEntities.Actors", @"
    SELECT VALUE -- Constructing Actors
        [SoughtOutModel.Actors](T1.Actors_ActorID, T1.Actors_Dated, T1.Actors_ScriptureReference, T1.Actors_Name, T1.Actors_Commentary, T1.Actors_Uri)
    FROM (
        SELECT 
            T.ActorID AS Actors_ActorID, 
            T.Dated AS Actors_Dated, 
            T.ScriptureReference AS Actors_ScriptureReference, 
            T.Name AS Actors_Name, 
            T.Commentary AS Actors_Commentary, 
            T.Uri AS Actors_Uri, 
            True AS _from0
        FROM SoughtOutModelStoreContainer.Actors AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SoughtOutEntities.Days
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SoughtOutEntities.Days", @"
    SELECT VALUE -- Constructing Days
        [SoughtOutModel.Days](T1.Days_DayID, T1.Days_Dated, T1.Days_ActorID, T1.Days_ScriptureReference, T1.Days_Title, T1.Days_Commentary, T1.Days_Uri)
    FROM (
        SELECT 
            T.DayID AS Days_DayID, 
            T.Dated AS Days_Dated, 
            T.ActorID AS Days_ActorID, 
            T.ScriptureReference AS Days_ScriptureReference, 
            T.Title AS Days_Title, 
            T.Commentary AS Days_Commentary, 
            T.Uri AS Days_Uri, 
            True AS _from0
        FROM SoughtOutModelStoreContainer.Days AS T
    ) AS T1");
        }
    }
}
