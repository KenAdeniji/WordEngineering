/*
	2020-04-27	Created. https://fbb-git.gitlab.io/cppannotations/cppannotations/html/
	2019-12-30	https://medium.com/@tdeniffel/pragmatic-compiling-from-c-to-webassembly-a-guide-a496cc5954b8
	2016-10-04	http://stackoverflow.com/questions/1549930/c-equivalent-of-java-tostring
	2019-12-31	http://www.fredosaurus.com/notes-cpp/oop-condestructors/copyconstructors.html
*/

#include <cassert>
#include <string>

#include "fbb-git.gitlab.io_-_PersonClass.hpp"

using namespace std;

// Person operator overloading
ostream& operator <<(ostream& outputStream, const Person& Person)
{
	outputStream
		<< "name = " << Person.getName()	
		<< " address = " << Person.getAddress()
		<< " phone = " << Person.getPhone()
		<< " mass = " << Person.getMass()
		;
		
	return outputStream;
}		

bool Person::hasOnly(char const *characters, string const &object)
{
					// object only contains 'characters'
	return object.find_first_not_of(characters) == string::npos;
}

Person::Person()
{
	mass = 0;
}
	
void Person::setName(string const &name)
{
	this->name = name;
}
void Person::setAddress(string const &address)
{
	this->address = address;
}
void Person::setPhone(string const &phone)
{
	if (phone.empty())
		this->phone = " - not available -";
	else if (hasOnly("0123456789", phone))
		this->phone = phone;
	else
		cout << "A phone number may only contain digits\n";
}
void Person::setMass(size_t mass)
{
	this->mass = mass;
}

string const &Person::getName() const
{
	return name;
}
string const &Person::getAddress() const
{
   return address;
}
string const &Person::getPhone() const
{
   return phone;
}
size_t Person::getMass() const
{
   return mass;
}
