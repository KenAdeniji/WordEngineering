http://jaguar.sjcc.edu/web/courses/cs173

The Override annotation
An override annotation indicates that the annotated method is required to override a method in a super class. If a method with this annotation does not override its super-class's method, the compiler will generate an error. Example 1 demonstrates the override annotation:
Example 1
public class Test_Override {
@Override
public String toString() {
   return super.toString() +
   " Testing annotation name: 'Override'";
}
}

public class Test_Deprecated {
   @Deprecated
   public void doSomething() {
      System.out.println("Testing annotation name: 'Deprecated'");
   }
}

@SuppressWarnings({"deprecation"})

The Retention annotation
The retention annotation indicates where and how long annotations with this type are to be retained. There are three values:
•	RetentionPolicy.SOURCE—Annotations with this type will be by retained only at the source level and will be ignored by the compiler 
•	RetentionPolicy.CLASS—Annotations with this type will be by retained by the compiler at compile time, but will be ignored by the VM 
•	RetentionPolicy.RUNTIME—Annotations with this type will be retained by the VM so they can be read only at run-time 
Example 5 shows you the RetentionPolicy.RUNTIME value in action:
Example 5
@Retention(RetentionPolicy.RUNTIME)
public @interface Test_Retention {
   String doTestRetention();
}

What is Apache Ant? 
Ant is a Java-based build tool. In theory, it is kind of like Make, without Make's wrinkles and with the full portability of pure Java code.
Why do you call it Ant? 
According to Ant's original author, James Duncan Davidson, the name is an acronym for "Another Neat Tool".
"Ants are very small and can carry a weight dozens of times their own"
Ant's history. 
Initially, Ant was part of the Tomcat code base, when it was donated to the Apache Software Foundation. It was created by James Duncan Davidson, who is also the original author of Tomcat. Ant was there to build Tomcat, nothing else.

Eclipse
Keyboard, control space, intellisence.

http://www.youtube.com/watch?v=Wt0JlbkmoAI&feature=related
Multi-Threading

class ThreadTest
{
	public static void Main()
	{
		DispThread dt1 = new DispThread("Hello");
		DispThread dt1 = new DispThread("World");
		
		dt1.Start();
		dt2.Start();
	}
}

class DispThread Extends Thread
{
	public String msg;
	
	public static void run()
	{
		for (int i = 0; i < 10; ++i)
		{
			System.out.println(i);
		}
	}
	
	DispThread(String msg)
	{
		this.msg = msg;
	}
}

New Server

GlassFish Server Open Source Edition 3 (Java EE 6)

Domain Name			GlassFishDomain
Admin Port			4848
Http Port			4851
Username			admin
Password
Reenter Password
Yes Create Operating System for the domain
Service Name		GlassFishDomainService
Start domain after creation

JRE								jre7
Application Server Directory	E:/glassfish3/glassfish/

Domain Directory						E:/glassfish3/glassfish/domains/GlassFishDomain
Administrator Id:						admin
Administrator Password:
Preserve Sessions Across Redeployment	Yes

http://localhost:4851/

Uninstall Glassfish
E:\glassfish3>uninstall -j "E:\Program Files\Java\jdk1.6.0_25"

Install GlassFish
E:\Program Files\Java\jdk1.6.0_25

USE "http://e-comfort.ephraimtech.com/WordEngineering/Yahoo/YQL/bart.xml" AS bart_table; SELECT * FROM bart_table;
USE "http://e-comfort.ephraimtech.com/WordEngineering/Yahoo/YQL/bart.xml" AS bart_table; SELECT name, eta FROM bart_table WHERE eta.destination LIKE "%SF%"

CS 173 - Java EE Course. 2011-11-05 and 2011-11-19 on-line classes. 2011-12-11 final exam.

2011-10-22 chapter 7. Homework iteration 1-8.

Document type description (DTD).
Tools to validate the DTD.

Cascading Stylesheet .odd-row .even-row for tables.

The following practical designs are available for building a persistence layer (see Figure 9.1).
•	Use JDBC APIs to map objects to a database
•	Use entity beans to map objects to a database
•	Use object-relational frameworks to map objects to a database

Persistence with entity beans can be managed by the EJB container. This is called container-managed persistence (CMP).
Alternatively, an entity bean can directly access the persistent data. This is called bean-managed persistence (BMP).
O/R mapping frameworks, such as Hibernate, TOPLink, and iBatis.

workspace\.metadata\.log

Invoke content assist as usual by typing Control+Space to get a list of suggestions.

Chapter 8. The Business Logic Tier
Business logic - The domain model and the business logic.

There are three types of EJBs: session beans, message-driven beans, and entity beans.

Chapter 9. The Persistence Tier
Persistence with entity beans can be managed by the EJB container. This is called container-managed persistence (CMP). Alternatively, an entity bean can directly access the persistent data. This is called bean-managed persistence (BMP).
In embedded single-user mode, Derby only supports a connection to a given database from one process. You will need to disconnect from Derby before using the database in your Web application. Right click on leaguedb in the Database Explorer and invoke the Disconnect menu item.

Chapter 10. Web Services
XML Schema Description (XSD).

http://localhost:4851/IceHockeyService/
localhost:4851/IceHockeyService/servlet/AxisServlet

If you have not previously done so, create a new J2EE utility project named LeaguePlanetModel and import the example source code from LeaguePlanetModel/src into it. Now, make this project available to the Web service as follows: Select the IceHockeyService project and open its Properties dialog. Add LeaguePlanetModel as a J2EE Module Dependency (see Figure 10.19).
Figure 10.19. J2EE Module Dependencies—IceHockeyService Project
[View full size image]
 
Loose coupling
The getSchedule operation simply gets the schedule object from the business tier and then copies it into an object required by the Web service. The Web service uses classes that were generated from schedule.xsd. This might seem like a waste of effort, but it has a couple of big advantages. First, the classes generated from schedule.xsd serialize precisely into the XML format you defined, which means that, unlike the situation for SOAP encoding, other programs can process it interoperably using a wide range of XML processing techniques. This is the main advantage of the document/literal approach. Second, you are now free to change the business tier model without breaking clients of your Web service. They are completely decoupled from your internal implementation. This is the meaning of loose coupling. Of course, if you change the business tier model, then you’ll also have to update the Web service implementation. 

Chapter 5
Two kinds of web systems.
	Application infrastructures
		Applications that have web front-ends. These front-ends access business layers, and persist their data in databases.
		Application infrastructures provide the basic layered architecture for these types of systems.
	Service infrastructures
		Collaborate with each other using the web. They have service-oriented architectures.
		The basic premise of SOA is that web systems should be composed from services that expose well-defined interfaces that enable both application-to-application and user-to-application communication.

Web Application Architecture
	A web application has three basic logical tiers or layers: Presentation, Business Logic, and Data.
	
	The top layer is for presentation. This user interface layer is often built using HTML. If the user interface does not require anything more than a web browser to run, it is called a thin client.
	The middle layer is where you implement the business logic. Typically, this layer is not specific to web applications. A well-designed system can reuse the business model.
	The bottom layer is where we keep the data in a persistent store.
		Databases are the most common choice. The data can be also kept in a file, or a mainframe.
	
	In a SOA service-oriented system, applications are integrated using services; the users are replaced by other web applications, and the presentation layer is replaced by the service layer.
	
	The J2EE model splits the presentation tier into client and server-side presentation layers. EJB components can be used to model business logic. The persistence tier can also be implemented using EJBs and J2EE services that are available to access enterprise information systems.
	
	J2EE has containers for web components and business components (EJB).
	
	The web container runs presentation layer components such as JSPs and servlets.
	
	Java web applications use JSPs and servlets. In model 1, requests are handled by JSPs, directly. In model 2, model view controller pattern, servlets act as controllers, and pass requests to JSPs.
	
	A layered architecture is a system containing multiple, strongly separated tiers (layers) with minimal dependencies and interactions between the layers.
	
	The business logic should not depend on the persistence layer, and you should not refer to datastore APIs in the business model.
	
	There are various approaches to object persistence. These range from Data Access Objects (DAO), which are usually dependent on database access APIs and query language like SQL, suitable for a small set of simple objects, may provide greater flexibility. Other methods include Java Persistence API (JPA), sophisticated Object Relational Mapping (ORM) frameworks like Hibernate and TOPLink.
	
	MVC - Separation of concerns
	
	The model handles application and business logic.
	The view handles presentation logic.
	The controller accepts and interprets keyboard and mouse input.
	
	The motivation behind MVC was to separate the model code (meaning non-user interface (UI) code) from its presentation.
	
Installing GlassFish on Eclipse
Windows
  Preferences
    Server
       Runtime Environments
          Add Button
              Download Additional Server Adaptors
                 GlassFish Java EE 5, Java EE 6
				 
	
	
	