<%@ WebService Language="C#" Class="IWillTakeThemUpForTakingMyDelayWebService" %>

using System;
using System.Data;
using System.Numerics;
using System.Web;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Web.Script.Services;

using System.Data;
using System.Data.SqlClient;

using System.Linq;
using System.Text;

using Newtonsoft.Json;

using InformationInTransit.DataAccess;
using InformationInTransit.ProcessLogic;
using InformationInTransit.UserInterface;

///<summary>
/// 2018-09-25	Created.
///</summary>
[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
[ScriptService]
public class IWillTakeThemUpForTakingMyDelayWebService : System.Web.Services.WebService
{
   	[WebMethod]
	[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
	public String Query(String scriptureReference)
    {
		String[] 	scriptureReferenceSubset = null;
		DataSet 	result = null;
		ScriptureReferenceHelper.Process
		(
			scriptureReference,
			ref scriptureReferenceSubset,
			ref result,
			ScriptureReferenceHelper.FullPositionQueryFormat,
			"KingJamesVersion"
		);
		DataTable dataTable;
		String columnName = "resultIndex";
		for
		(
			int dataTableIndex = 0, dataTableCount = result.Tables.Count;
			dataTableIndex < dataTableCount;
			++dataTableIndex
		)
		{	
			dataTable = result.Tables[dataTableIndex];
			DataColumn dataColumn = new DataColumn(columnName, typeof(Int32));
			dataTable.Columns.Add(dataColumn);
			for
			(
				int dataRowIndex = 0, dataRowCount = dataTable.Rows.Count;
				dataRowIndex < dataRowCount;
				++dataRowIndex
			)
			{	
				dataTable.Rows[dataRowIndex][columnName] = dataTableIndex;
			}
			dataTable.AcceptChanges();
		}
		DataTable dataTableMerged = result.CustomMerge();
		var sortTable = dataTableMerged.AsEnumerable()
                .OrderBy(r => r.Field<int>("verseIdSequence"))
                .ThenBy(r => r.Field<int>("resultIndex"))
                .CopyToDataTable()
				;
		var distinctTable = sortTable.AsEnumerable()
                .GroupBy(r => r.Field<int>("resultIndex"))
                .ToList()
				;
		StringBuilder sbScriptureReference = new StringBuilder();
		for
		(
			int distinctRowIndex = 0, distinctRowCount = distinctTable.Count;
			distinctRowIndex < distinctRowCount;
			++distinctRowIndex
		)
		{	
			if (sbScriptureReference.Length > 0)
			{
				sbScriptureReference.Append(", ");
			}
			sbScriptureReference.Append
			( 
				scriptureReferenceSubset[ distinctTable[distinctRowIndex]<resultIndex> ] 
			);
		}
		string json = JsonConvert.SerializeObject(sortTable, Formatting.Indented);
		return sbScriptureReference.ToString();
    }
}
