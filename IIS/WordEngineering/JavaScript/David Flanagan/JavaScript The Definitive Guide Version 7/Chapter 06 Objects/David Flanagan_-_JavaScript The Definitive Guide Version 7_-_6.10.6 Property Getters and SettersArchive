<!DOCTYPE html>
<html>
	<!--
		2020-06-24	https://github.com/davidflanagan/jstdg7/blob/master/ch06/serialnum.js
	-->
	<head>
		<title>David Flanagan_-_JavaScript The Definitive Guide Version 7_-_6.10.6: Property Getters and Setters</title>
		<meta charset="UTF-8"/>
		<meta name="description" content="David Flanagan_-_JavaScript The Definitive Guide Version 7_-_6.10.6: Property Getters and Setters"/>
		<meta name="keywords" content="David Flanagan, JavaScript The Definitive Guide, version 7, chapter 6, 6.10.6: Property Getters and Setters"/>
		<meta name="robots" content="index, follow"/>
		<meta name="author" content="Ken Adeniji"/>
		<link rel="stylesheet" type="text/css" href="/WordEngineering/WordUnion/9432.css">
	</head>
	<body>
		<div align="center">
			<table>
				<tr>
					<td><label for="seed">Seed</label></td>
					<td><input id="seed" type="number" focus/></td>
				</tr>
				<tr>
					<td colspan="2" align="center">
						<input type="submit" id="getter" value="Getter"/>
						<input type="submit" id="setter" value="Setter"/>
					</td>
				</tr>	
			</table>
			<div id="resultSet"></div>
		</div>

		<script>
			var isPostBack = false;
			var seedDefault = 10;

			var seedElement = document.getElementById("seed");
			
			var	resultSetElement = document.getElementById("resultSet");

			function pageLoad()
			{
				if (isPostBack === false)
				{
					const urlParams = new URLSearchParams(window.location.search);
					
					var seedParam = urlParams.get("seed");
					seedElement.value = seedParam ? seedParam : seedDefault;
;
					isPostBack = true;
				}
 			}

			function queryGetter()
			{
				resultSetElement.innerHTML = serialnum.next;
			}

			function querySetter()
			{
				serialnum.next = seedElement.value;
			}

			document.getElementById("getter").
				addEventListener("click", queryGetter, false);

			document.getElementById("setter").
				addEventListener("click", querySetter, false);
			
			window.addEventListener("load", pageLoad, false);			
			
			// This object generates strictly increasing serial numbers
			const serialnum = {
				// This data property holds the next serial number.
				// The _ in the property name hints that it is for internal use only.
				_n: 0,

				// Return the current value and increment it
				get next() { return this._n++; },

				// Set a new value of n, but only if it is larger than current
				set next(n) {
					if (n > this._n) this._n = n;
					else throw new Error("serial number can only be set to a larger value");
				}
			};
		</script>
	</body>
</html>
