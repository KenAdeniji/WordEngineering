//The result set should only include anchors with the external class name.
alert(jQuery('a').filter('.external').length + ' external links');

alert(
jQuery('a')
.filter(
function(index){ return $(this).hasClass('external');}
)
.length + ' external links'
);

alert('The three paragraphs in all contain ' +
jQuery('p').
find('em')
.length + '
italic words');

alert('The three paragraphs in all contain ' +
jQuery('em',$('p'))
.length +
' italic words');

The
jQuery
.find()
method can be used to create a new set of elements based on context
of the current set of DOM elements and their children elements. People often confuse
the use of the
.filter()
method and
.find()
method. The easiest way to remember
the difference is to keep in mind that
.find()
will operate/select the children of the
current set while
.filter()
will only operate on the current set of elements. In other
words, if you want to change the current wrapper set by using it as a context to further
select the children of the elements selected, use
.find()
. If you only want to filter the
current wrapped set and get a new subset of the current DOM elements in the set only,
use
.filter()
. To boil this down even more,
find()
returns children elements, while
filter()
only filters what is in the current wrapper set.

A destructive jQuery method (e.g.,
filter()
or
find()
) that was used on a set of ele-
ments needs to be removed so that the set prior to the use of the destructive method is
returned to its previous state and can then be operated as if the destructive method had
never been invoked.

jQuery('div').find('p').andSelf().css('border','1px solid #993300');
Keep in mind that when you use the
andSelf()
method, it will only add into the current
set being operated on and the prior set, but not all prior sets.

Now, let’s select the second
<li>
element using the
:eq()
index custom selector:
//selects the second element in the set of <li>'s by index, index starts at 0
jQuery('li:eq(1)');

jQuery('li:eq(1)')
.next(
) //selects the third <li>
jQuery('li:eq(1)')
.prev()
//selects the first <li>
jQuery('li:eq(1)')
.parent()
//selects the <ul>
jQuery('li:eq(1)')
.parent().children()
//selects all <li>s
jQuery('li:eq(1)')
.nextAll()
//selects all the <li>s after the second <li>
jQuery('li:eq(1)')
.prevAll()
//selects all the <li>s before the second <li>

jQuery('<p><a>jQuery</a></p>')
.find('a').attr('href','http://www.jquery.com');

jQuery('<p><a>jQuery</a></p>').find('a').attr('href','http://www.jquery.com')
.end().appendTo('body');

jQuery('a').remove(); //Remove all anchors
jQuery('a').remove('.remove'); //Remove all anchors with the class remove

jQuery('li.remove').replaceWith('<li>removed</li>');
jQuery('<li>removed</li>').replaceAll('li.remove');

jQuery('ul').clone().appendTo('body');

alert(
jQuery('a').
attr('href','http://www.jquery.com').attr('href')
);
jQuery('a').attr(
{'href':'http://www.jquery.com','title':'jquery.com'}
).attr('href')
jQuery('p').
html('<strong>Hello World</strong>, I am a <em>&lt;p&gt;</em> element.')
;

(function(
$
){ //function to create private scope with $ parameter
//private scope and using $ without worry of conflict
})(
jQuery
); //invoke nameless function and pass it the jQuery object

jQuery('#nav li > a'); //In the element ID, nav, select all anchors that are children of list item.

Depending on what you want to do, you have the following filters at your disposal.
These may look like CSS pseudoclasses, but in jQuery they’re called
filters
:
:first
Matches the first selected element
:last
Matches the last selected element
:even
Matches even elements (zero-indexed)
:odd
Matches odd elements (zero-indexed)
:eq(
n
)
Matches a single element by its index (
n
)
:lt(
n
)
Matches all elements with an index below
n
2.3 Selecting Elements by Index Order | 39
:gt(
n
)
Matches all elements with an index above
n

// Select all SPANs with 'Bob' in:
jQuery('span:contains("Bob")');

jQuery('p:visible').hide(); // Hiding only elements that are currently visible

Use an attribute selector to match specific attributes and corresponding values:
jQuery('a[href="http://google.com"]');

So, as an example, if you needed to select all text inputs, you would simply do this:
jQuery(':text');
There
is also an
:input
filter that selects all
input
,
textarea
,
button
, and
select
elements.

jQuery('*').filter(function(){
return !!jQuery(this).css('backgroundImage');
});
The preceding code selects all elements with a background image.

Within the function you pass to
filter()
,
you can refer to the current element via the
this
keyword. To make it into a jQuery object (so you can access and perform jQuery
methods), simply wrap it in the jQuery function:
this; // Regular element object
jQuery(this); // jQuery object

$("ul > li:odd").addClass("odd");

//Top eight
<script type="text/javascript">
(function($){
$(document).ready(function(){
$("ol#east > li")
.eq(7)
.css("border-bottom", "1px solid #000000");
$("ol#west > li")
.eq(7)
.css("border-bottom", "1px solid #000000");
});
})(jQuery);
</script

jQuery.noConflict();

